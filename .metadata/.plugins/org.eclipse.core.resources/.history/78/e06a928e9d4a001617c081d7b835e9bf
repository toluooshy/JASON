package pack;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.util.Random;



import framework.KeyInput;
import framework.ObjectId;
import framework.Texture;

public class Game extends Canvas implements Runnable
{
	private static final long serialVersionUID = 4020535509852794236L;
	
	private boolean running = false;
	private Thread thread;
	private Handler handler;
	
	public static int WIDTH, HEIGHT;
	
	public BufferedImage level0 = null,
						 background0 = null,
						 backgroundw1 = null,
						 backgrounde1 = null,
						 backgroundw2 = null,
						 backgrounde2 = null,
						 backgroundw3 = null,
						 backgrounde3 = null;
	
	//Object

	Camera cam;
	static Texture tex;
	
	Random rand = new Random();
	
	public static int LEVEL = 0;


	private void init()
	{
		WIDTH = getWidth();
		HEIGHT = getHeight();
		
		tex = new Texture();
		
		BufferedImageLoader loader = new BufferedImageLoader();
		
		level0 = loader.loadImage("/lvl0-0.png"); //loading the level
		
		
		background0 = loader.loadImage("/lvl0-0_bkg.png"); //Loading background
		backgroundw1 = loader.loadImage("/lvl1-1,1-2,1-3_bkg.png"); //Loading background
		backgrounde1 = loader.loadImage("/lvl1-end_bkg.png"); //Loading background
		backgroundw2 = loader.loadImage("/lvl2-1,2-2,2-3_bkg.png"); //Loading background
		backgrounde2 = loader.loadImage("/lvl2-end_bkg.png"); //Loading background
		backgroundw3 = loader.loadImage("/lvl3-1,3-2,3-3_bkg.png"); //Loading background
		backgrounde3 = loader.loadImage("/lvl3-end_bkg.png"); //Loading background
		
		cam = new Camera(0, 0);
		handler = new Handler(cam);
		
		
		handler.LoadImageLevel(level0);
		
		//handler.addObject(new Player(100, 100, handler, ObjectId.Player));
		//handler.createLevel();
		
		this.addKeyListener(new KeyInput(handler));
	} 
	
	
	public synchronized void start(){
		if(running)
			return;
		
		running = true;
		thread = new Thread(this);
		thread.start();
	}

	public void run()
	{
		init();
		this.requestFocus();
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int updates = 0;
		int frames = 0;
		while(running){
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while(delta >= 1){
				tick();
				updates+=.5;
				delta--;
			}
			render();
			frames++;
					
			if(System.currentTimeMillis() - timer > 1000){
				timer += 1000;
				System.out.println("FPS: " + frames + " TICKS: " + updates);
				System.out.println(LEVEL);
				frames = 0;
				updates = 0;
			}
		}
	}
	
	private void tick()
	{
		handler.tick();
		for(int i = 0; i < handler.object.size(); i++){
			if(handler.object.get(i).getId() == ObjectId.Player){
				cam.tick(handler.object.get(i));
			}
		}
	}
	
	private void render()
	{
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null)
		{
			this.createBufferStrategy(2);
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
		Graphics2D g2d = (Graphics2D) g;
		//////////////////////////////////
		
		
		//Draw Here
		g.fillRect(0, 0, getWidth(), getHeight());
		g2d.translate(cam.getX(), cam.getY()); //begin of cam
		
		if(LEVEL == 0){
				g.drawImage(background0, 0, 0, this);
		}	
		if(LEVEL >= 1 && LEVEL <=4){
			float w = -Camera.xcoor + 40;
			for(int xx = 0; xx < backgroundw1.getWidth() * 2; xx += backgroundw1.getWidth())
				g.drawImage(backgroundw1, (int)w + xx -100, 0, this);
		}
		if(LEVEL == 5){
			for(int xx = 0; xx < backgrounde1.getWidth() * 6; xx += backgrounde1.getWidth())
				g.drawImage(backgrounde1, xx -250, 0, this);
		}	
		if(LEVEL >= 6 && LEVEL <= 9){
			float w = -Camera.xcoor + 40;
			for(int xx = 0; xx < backgroundw2.getWidth() * 1; xx += backgroundw2.getWidth())
				g.drawImage(backgroundw2, (int)w + xx - 50, 0, this);
		}	
		if(LEVEL == 10){
			for(int xx = 0; xx < backgrounde2.getWidth() * 6; xx += backgrounde2.getWidth())
				g.drawImage(backgrounde2, xx -250, 0, this);
		}	
		if(LEVEL >= 11 && LEVEL <= 14){
			float w = -Camera.xcoor + 40;
			for(int xx = 0; xx < backgroundw3.getWidth() * 1; xx += backgroundw3.getWidth())
				g.drawImage(backgroundw3, (int)w + xx - 50, 0, this);
		}
		if(LEVEL == 15){
			for(int xx = 0; xx < backgrounde3.getWidth() * 6; xx += backgrounde3.getWidth())
				g.drawImage(backgrounde3, xx -250, 0, this);
		}	
		/**if(LEVEL == 1){
			
			for(int xx = 0; xx < background0.getWidth() * 10; xx += background0.getWidth())
				g.drawImage(background0, xx, 50, this);
		}**/	
			handler.render(g);
			
		g2d.translate(-cam.getX(), -cam.getY()); //end of cam
		
		//////////////////////////////////
		g.dispose();
		bs.show();
	}
	
	public static Texture getInstance(){
		return tex;
	}
	
	public static void main(String args[]){
		new Window(780, 580, "JASON", new Game());
	}

}
